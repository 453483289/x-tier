#include <linux/module.h>
#include <linux/init.h>
#include <linux/fs.h>
#include <linux/sched.h>
#include <linux/fcntl.h>
#include <linux/cred.h>
#include <asm/desc.h>

// ACE - Access Control Enforcer
asmlinkage long (*orig_sys_open)(const char __user *filename, int flags, umode_t mode) = (void *)0xffffffff81164830;

long policy_check(char *filename, unsigned int euid)
{
	// Simple checks
	if (strstr(filename, ".ace") != 0)
	{
		if (euid == 1000 || euid == 1001)
			return 0;
		else
			return -1;
	}

	return 0;
}

/*
We cannot use the current macro of the kernel size it
will not compile with mcmodel large
struct task_struct *get_current_task(void)
{
	unsigned long esp0 = 0;
	struct thread_info *cur_thread = 0;
	struct task_struct *cur_task = 0;

	unsigned long tr = 0;
	struct desc_ptr gdt;	
	tss_desc tss_sel;
	u64 tss_base;

	// Get Tr
	tr = native_store_tr();

	// Get GDT
	native_store_gdt(&gdt);

	// Get the TSS desc
	memcpy((void *)&tss_sel, (void *)(gdt.address + tr), 16);

	// Build TSS base
	tss_base = (tss_sel.base0 | 
		   ((tss_sel.base1) << 16) | 
		   ((tss_sel.base2) << 24) |
		   (((u64)(tss_sel.base3)) << 32));

	// Get esp0
	esp0 = *((unsigned long *)(tss_base + 4));

	// get thread info
	if (esp0)	
		cur_thread = (struct thread_info *)(esp0 - 0x2000);

	// get task 
	if (cur_thread)
		cur_task = cur_thread->task;	

	return cur_task;
}
*/

// Own version of the current macro
// and a single cpu
struct task_struct *get_current_task(void)
{
	return (struct task_struct *)(__get_cpu_var(current_task));
}

asmlinkage long my_open(const char __user *filename, int flags, umode_t mode)
{
	char *fname = 0; 
	struct task_struct *cur = 0;

	// Get the filename	
	fname = getname(filename);

	if (!fname)
	{
		printk("[ACE - ERROR] - Could not get the name of the file!\n");
		return (-ENOENT);
	}

	// Get the current task
	cur = get_current_task();

	if (!cur)
	{
		printk("[ACE - ERROR] - Could not get the current task!\n");
		return (-ENOENT);
	}

	printk("[ACE - INFO] Checking file '%s'...\n", fname);

	if (policy_check(fname, __task_cred(cur)->euid) == 0)
		return orig_sys_open(filename, flags, mode);
	else
		return (-EACCES);	
}


static int __init ace_init(void)
{
	return 0;
}

static void __exit ace_exit(void)
{
        return;
}

module_init(ace_init);
module_exit(ace_exit);

MODULE_LICENSE("GPL");
